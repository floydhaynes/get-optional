// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Flow type definitions should not typecheck for incorrect usage 1`] = `
"Error --------------------------------------------------------------------------------- flow-should-not-pass/get.js:7:14

Cannot assign \`get(...)\` to \`c\` because:
 - undefined [1] is incompatible with \`C\` [2].
 - undefined [3] is incompatible with \`C\` [2].

   flow-should-not-pass/get.js:7:14
    7| const c: C = get(input, 'a', 'b', 'c');
                    ^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   flow-interfaces.js:13:6
   13| 	c?: C;

            ^ [1]
   flow-should-not-pass/get.js:7:10
    7| const c: C = get(input, 'a', 'b', 'c');
                ^ [2]
   node_modules/get-optional/index.js.flow:21:5
   21| 		: void | $ElementType<$NonMaybeType<$ElementType<$NonMaybeType<$ElementType<$NonMaybeType<T>, Key1>>, Key2>>, Key3>;
           ^^^^ [3]


Error -------------------------------------------------------------------------------- flow-should-not-pass/get.js:10:11

Cannot call \`get\` because:
 - Either no more than 2 arguments are expected by function type [1].
 - Or property \`c\` is missing in \`A\` [2].

   flow-should-not-pass/get.js:10:11
   10| const b = get(input, 'a', 'c');
                 ^^^^^^^^^^^^^^^^^^^^

References:
   node_modules/get-optional/index.js.flow:4:2
        v--
    4| 	<T,
    5| 		Key1: $Keys<$NonMaybeType<T>>,
    6| 	>
    7| 		(object: T, key1: Key1)
    8| 		: void | $ElementType<$NonMaybeType<T>, Key1>;
       		--------------------------------------------^ [1]
   flow-interfaces.js:21:5
   21| 	a: A;

           ^ [2]


Error -------------------------------------------------------------------------------- flow-should-not-pass/get.js:14:57

Cannot call \`get\` because:
 - Either property \`toFixed\` is missing in number [1] in type argument \`Key1\`.
 - Or property \`toFixed\` is missing in number [1] in type argument \`Key1\`.
 - Or property \`toFixed\` is missing in number [1] in type argument \`Key1\`.
 - Or property \`toFixed\` is missing in number [1] in type argument \`Key1\`.
 - Or property \`toFixed\` is missing in number [1] in type argument \`Key1\`.

   flow-should-not-pass/get.js:14:57
   14| const toFixed: void | typeof Number.prototype.toFixed = get(e, 'toFixed');
                                                               ^^^^^^^^^^^^^^^^^

References:
   flow-interfaces.js:3:10
    3| type E = number;

                ^^^^^^ [1]


Error -------------------------------------------------------------------------------- flow-should-not-pass/get.js:19:24

Cannot assign \`get(...)\` to \`fromNull\` because undefined [1] is incompatible with null [2].

   flow-should-not-pass/get.js:19:24
   19| const fromNull: null = get(null, 'a');
                              ^^^^^^^^^^^^^^

References:
   node_modules/get-optional/index.js.flow:8:5
    8| 		: void | $ElementType<$NonMaybeType<T>, Key1>;
           ^^^^ [1]
   flow-should-not-pass/get.js:19:17
   19| const fromNull: null = get(null, 'a');
                       ^^^^ [2]


Error -------------------------------------------------------------------------------- flow-should-not-pass/get.js:23:40

Cannot call \`get\` because:
 - Either no more than 2 arguments are expected by function type [1].
 - Or no more than 3 arguments are expected by function type [2].
 - Or an indexer property is missing in \`InputClass\` [3].

   flow-should-not-pass/get.js:23:40
   23| const inputClassValue: void | number = get(new InputClass(), 'self', 'self', 'value');
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   node_modules/get-optional/index.js.flow:4:2
        v--
    4| 	<T,
    5| 		Key1: $Keys<$NonMaybeType<T>>,
    6| 	>
    7| 		(object: T, key1: Key1)
    8| 		: void | $ElementType<$NonMaybeType<T>, Key1>;
       		--------------------------------------------^ [1]
   node_modules/get-optional/index.js.flow:9:2
        v--
    9| 	<T,
   10| 		Key1: $Keys<$NonMaybeType<T>>,
   11| 		Key2: Prop,
   12| 	>
   13| 		(object: T, key1: Key1, key2: Key2)
   14| 		: void | $ElementType<$NonMaybeType<$ElementType<$NonMaybeType<T>, Key1>>, Key2>;
       		-------------------------------------------------------------------------------^ [2]
   flow-should-not-pass/get.js:23:44
   23| const inputClassValue: void | number = get(new InputClass(), 'self', 'self', 'value');
                                                  ^^^^^^^^^^^^^^^^ [3]


Error ---------------------------------------------------------------------- flow-should-not-pass/getWithDefault.js:7:14

Cannot assign \`getWithDefault(...)\` to \`c\` because:
 - property \`arr\` is missing in \`B\` [1] but exists in \`C\` [2].
 - property \`d\` is missing in \`B\` [1] but exists in \`C\` [2].
 - property \`readonlyArr\` is missing in \`B\` [1] but exists in \`C\` [2].

   flow-should-not-pass/getWithDefault.js:7:14
   7| const c: C = getWithDefault(bDefault, input, 'a', 'b', 'c');

                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   flow-should-not-pass/getWithDefault.js:9:23
   9| declare var bDefault: B;

                            ^ [1]
   flow-should-not-pass/getWithDefault.js:7:10
   7| const c: C = getWithDefault(bDefault, input, 'a', 'b', 'c');

               ^ [2]


Error --------------------------------------------------------------------- flow-should-not-pass/getWithDefault.js:11:11

Cannot call \`getWithDefault\` because:
 - Either no more than 3 arguments are expected by function type [1].
 - Or property \`c\` is missing in \`A\` [2].

   flow-should-not-pass/getWithDefault.js:11:11
   11| const b = getWithDefault(bDefault, input, 'a', 'c');

                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   node_modules/get-optional/index.js.flow:44:2
        v-------------
   44| 	<DefaultValue,
   45| 		T,
   46| 		Key1: $Keys<$NonMaybeType<T>>,
   47| 	>
   48| 		(defaultValue: DefaultValue, object: T, key1: Key1)
   49| 		: DefaultValue | $NonMaybeType<$ElementType<$NonMaybeType<T>, Key1>>;
       		-------------------------------------------------------------------^ [1]
   flow-interfaces.js:21:5
   21| 	a: A;

           ^ [2]


Error -------------------------------------------------------------------------------- flow-should-not-pass/nth.js:11:35

Cannot assign \`nth(...)\` to \`fromNullableList\` because undefined [1] is incompatible with boolean [2].

   flow-should-not-pass/nth.js:11:35
   11| const fromNullableList: boolean = nth(get(input, 'a', 'b', 'c', 'arr'), 0);

                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   node_modules/get-optional/index.js.flow:88:70
   88| declare export function nth<T>(list: ?$ReadOnlyArray<T>, n: number): void | T;
                                                                            ^^^^ [1]
   flow-should-not-pass/nth.js:11:25
   11| const fromNullableList: boolean = nth(get(input, 'a', 'b', 'c', 'arr'), 0);

                               ^^^^^^^ [2]


Error -------------------------------------------------------------------------------- flow-should-not-pass/nth.js:14:53

Cannot call \`nth\` with \`get(...)\` bound to \`list\` because boolean [1] is incompatible with string [2] in array element.

   flow-should-not-pass/nth.js:14:53
   14| const fromNullableReadonlyList: void | string = nth(get(input, 'a', 'b', 'c', 'readonlyArr'), 0);

                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   flow-interfaces.js:10:30
   10| 	readonlyArr: $ReadOnlyArray<boolean>;

                                    ^^^^^^^ [1]
   flow-should-not-pass/nth.js:14:40
   14| const fromNullableReadonlyList: void | string = nth(get(input, 'a', 'b', 'c', 'readonlyArr'), 0);

                                              ^^^^^^ [2]


Error -------------------------------------------------------------------------------- flow-should-not-pass/nth.js:17:24

Cannot call \`nth\` with \`get(...)\` bound to \`list\` because \`B\` [1] is incompatible with read-only array type [2].

   flow-should-not-pass/nth.js:17:24
   17| const fromObject = nth(get(input, 'a', 'b'), 0);

                              ^^^^^^^^^^^^^^^^^^^^

References:
   flow-interfaces.js:17:12
   17| 	b: null | B;

                  ^ [1]
   node_modules/get-optional/index.js.flow:88:39
   88| declare export function nth<T>(list: ?$ReadOnlyArray<T>, n: number): void | T;
                                             ^^^^^^^^^^^^^^^^^ [2]


Error -------------------------------------------------------------------------------- flow-should-not-pass/nth.js:20:40

Cannot call \`nth\` with \`'0'\` bound to \`n\` because string [1] is incompatible with number [2].

   flow-should-not-pass/nth.js:20:40
   20| const withStringIndex = nth([1, 2, 3], '0');

                                              ^^^ [1]

References:
   node_modules/get-optional/index.js.flow:88:61
   88| declare export function nth<T>(list: ?$ReadOnlyArray<T>, n: number): void | T;
                                                                   ^^^^^^ [2]


Error --------------------------------------------------------------------- flow-should-not-pass/nthWithDefault.js:11:38

Cannot call \`nthWithDefault\` with \`defaultValue\` bound to \`defaultValue\` because \`DefaultValue\` [1] is incompatible with
number [2].

   flow-should-not-pass/nthWithDefault.js:11:38
   11| const first: number = nthWithDefault(defaultValue, list, 0);

                                            ^^^^^^^^^^^^

References:
   flow-should-not-pass/nthWithDefault.js:7:22
    7| const defaultValue = new DefaultValue();

                            ^^^^^^^^^^^^^^^^^^ [1]
   flow-should-not-pass/nthWithDefault.js:11:14
   11| const first: number = nthWithDefault(defaultValue, list, 0);

                    ^^^^^^ [2]


Error --------------------------------------------------------------------- flow-should-not-pass/nthWithDefault.js:14:44

Cannot assign \`nthWithDefault(...)\` to \`nonExistent\` because:
 - number [1] is incompatible with string [2].
 - number [3] is incompatible with string [2].
 - number [4] is incompatible with string [2].

   flow-should-not-pass/nthWithDefault.js:14:44
   14| const nonExistent: DefaultValue | string = nthWithDefault(defaultValue, list, 100);

                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   flow-should-not-pass/nthWithDefault.js:9:15
    9| const list = [1, 2, 3];

                     ^ [1]
   flow-should-not-pass/nthWithDefault.js:14:35
   14| const nonExistent: DefaultValue | string = nthWithDefault(defaultValue, list, 100);

                                         ^^^^^^ [2]
   flow-should-not-pass/nthWithDefault.js:9:18
    9| const list = [1, 2, 3];

                        ^ [3]
   flow-should-not-pass/nthWithDefault.js:9:21
    9| const list = [1, 2, 3];

                           ^ [4]



Found 18 errors

Only showing the most relevant union/intersection branches.
To see all branches, re-run Flow with --show-all-branches
"
`;
